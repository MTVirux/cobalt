version: '3.8'

services:
    cobalt-api:
        image: ghcr.io/imputnet/cobalt:10
        #build: 
        #    dockerfile: Dockerfile
        #    context: .
        init: true
        read_only: true
        restart: unless-stopped
        container_name: cobalt-api

        # expose port only to reverse proxy
        ports:
            - 127.0.0.1:9000:9000

        environment:
            # replace https://api.url.example/ with your instance's url
            # or else tunneling functionality won't work properly
            - API_URL: ${API_URL}
            - API_PORT: ${API_PORT}

            #Uncomment to use
            #- TURNSTILE_SITEKEY: "${TURNSTILE_SITEKEY}"
            #- TURNSTILE_SECRET: "${TURNSTILE_SECRET}"
            #- JWT_SECRET: "${JWT_SECRET}"

            # if you want to use cookies for fetching data from services,
            # uncomment the next line & volumes section
            - COOKIE_PATH: "/cookies.json"

            # it's recommended to configure bot protection or api keys if the instance is public,
            # see /docs/protect-an-instance.md for more info

            # see /docs/run-an-instance.md for more variables that you can use here

            # for automatic HTTPS with nginx-proxy + letsencrypt
            - VIRTUAL_HOST: ${VIRTUAL_HOST}
            - VIRTUAL_PORT: ${API_PORT}
            - LETSENCRYPT_HOST: ${VIRTUAL_HOST}
            - LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
            - YOUTUBE_SESSION_SERVER: ${YOUTUBE_SESSION_SERVER}
        labels:
            - com.centurylinklabs.watchtower.scope=cobalt
        depends_on:
            yt-session-generator:
                condition: service_healthy
        # uncomment only if you use the COOKIE_PATH variable
        volumes:
            - ./cookies.json:/cookies.json
        networks:
            - proxy

    # nginx reverse proxy (with automatic HTTPS)
    nginx-proxy:
        image: jwilder/nginx-proxy
        container_name: nginx-proxy
        restart: unless-stopped
        ports:
            - 80:80
            - 443:443
        environment:
            - TRUST_DOWNSTREAM_PROXY=${TRUST_DOWNSTREAM_PROXY}
            - RESOLVER=8.8.8.8
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock:ro
            - ./nginx/certs:/etc/nginx/certs
            - ./nginx/vhost:/etc/nginx/vhost.d
            - ./nginx/html:/usr/share/nginx/html
        networks:
            - proxy

    # letsencrypt companion for automatic TLS
    letsencrypt:
        image: jrcs/letsencrypt-nginx-proxy-companion
        container_name: nginx-letsencrypt
        restart: unless-stopped
        environment:
            - NGINX_PROXY_CONTAINER=nginx-proxy
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./nginx/certs:/etc/nginx/certs
            - ./nginx/vhost:/etc/nginx/vhost.d
            - ./nginx/html:/usr/share/nginx/html
        depends_on:
            - nginx-proxy
        networks:
            - proxy

    # watchtower updates the cobalt image automatically
    watchtower:
        image: ghcr.io/containrrr/watchtower
        restart: unless-stopped
        command: --cleanup --scope cobalt --interval 900 --include-restarting
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    # if needed, use this image for automatically generating poToken & visitor_data
    yt-session-generator:
        #image: ghcr.io/imputnet/yt-session-generator:webserver
        build:
            dockerfile: Dockerfile.yt-session-generator
            context: .
    
        init: true
        restart: unless-stopped
        container_name: yt-session-generator
        ports:
            - 8081:8080
        labels:
            - com.centurylinklabs.watchtower.scope=cobalt
        networks:
            - proxy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/token"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s
networks:
    proxy:
        external: false

volumes:
    nginx_certs:
    nginx_vhost:
    nginx_html:
